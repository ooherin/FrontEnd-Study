1. 믹스인 
- 믹스인은 클래스나 특정 개체에 기능이나 동작을 포함시켜 객체를 재사용하는 것
- 상태나 메서드를 주입해 사용
- 하나의 객체에 너무 많은 역할이 부여되는 문제 발생

2. HOC
- 믹스인의 대안으로 나온 기능
- 컴포넌트를 가져와 새로운 프로퍼티나 동작을 추가한 새로운 컴포넌트로 래핑하여 
그대로 반환하는 함수
- HOC는 직접적으로 상태를 주입하지 않고, (기존에 있던 객체 상태를 바꾸지 x)
컴포넌트를 래핑하여 프로퍼티를 통해 기능을 제공한다.
- 이는 직접적인 상태 주입을 피하고, HOC가 상태를 관리하게 함으로써,
관리할 상태를 분리시켜 객체의 역할을 분담할 수 있고,
믹스인 패턴의 문제인 한 객체에 너무 많은 상태가 쌓이는 것을 방지할 수 있다. 

=> 현재 믹스인 패턴은 죽은 패턴이며, HOC 패턴이  함수형 프로그래밍 패러다임과 컴포넌트 기반 구조와 
잘 어울려 많이 쓰이고 있는 상태이다. 

화해의 HOC 사용 참조 :https://blog.hwahae.co.kr/all/tech/11631

HOC는 컴포넌트 로직 재사용을 위한 패턴
최근에는 Hooks의 사용으로 HOC의 사용이 줄었다. 하지만 Hooks 만으로는 코드의 재사용성을 
높이기 어려운 경우가 있다. 